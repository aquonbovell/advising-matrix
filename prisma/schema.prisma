generator kysely {
  provider = "prisma-kysely"
  output   = "../src/lib/db"
  fileName = "schema.d.ts"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String    @id @unique @db.Uuid
  name            String
  email           String    @unique
  password        String
  role            UserRole
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  alternate_email String
  advisor         Advisor[]
  sessions        Session[]
  StudentT        Student[]
}

model Session {
  id         String   @id @default(uuid())
  expires_at DateTime
  user_id    String   @db.Uuid
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Advisor {
  advisor_id String  @db.Uuid
  student_id String  @db.Uuid
  user       User    @relation(fields: [advisor_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Student    Student @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([advisor_id, student_id])
}

model Student {
  id             String    @id @db.Uuid
  user_id        String    @db.Uuid
  major_id       String    @db.Uuid
  minor_id       String?   @db.Uuid
  invite_token   String?
  invite_expires DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime
  Advisor        Advisor[]
  Majors         Majors    @relation(fields: [major_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  user           User             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  StudentCourses StudentCourses[]
}

model Department {
  id     BigInt   @id @default(autoincrement())
  name   String   @unique
  Course Course[]
}

model Course {
  id                                                           Int                       @id @unique
  code                                                         String                    @unique
  name                                                         String
  level                                                        Int
  credits                                                      Int
  departmentId                                                 BigInt
  department                                                   Department                @relation(fields: [departmentId], references: [id], onUpdate: NoAction)
  CoursePrerequisite_CoursePrerequisite_courseIdToCourse       CoursePrerequisite[]      @relation("CoursePrerequisite_courseIdToCourse")
  CoursePrerequisite_CoursePrerequisite_prerequisiteIdToCourse CoursePrerequisite[]      @relation("CoursePrerequisite_prerequisiteIdToCourse")
  StudentCourses                                               StudentCourses[]
  CoursesLevelRestriction                                      CoursesLevelRestriction[]
}

model CoursesLevelRestriction {
  id       String   @id @unique @default(uuid()) @db.Uuid
  courseId Int
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  area     String[]
  credits  Int
  level    Int[]
}

model CoursePrerequisite {
  id                                               String @id @unique @default(uuid()) @db.Uuid
  courseId                                         Int
  prerequisiteId                                   Int
  Course_CoursePrerequisite_courseIdToCourse       Course @relation("CoursePrerequisite_courseIdToCourse", fields: [courseId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Course_CoursePrerequisite_prerequisiteIdToCourse Course @relation("CoursePrerequisite_prerequisiteIdToCourse", fields: [prerequisiteId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Majors {
  id                String              @id @unique @db.Uuid
  name              String              @unique(map: "Majors_name_idx")
  MajorRequirements MajorRequirements[]
  Student           Student[]
}

model Minors {
  id                String              @id @unique @db.Uuid
  name              String              @unique(map: "Minors_name_idx")
  MinorRequirements MinorRequirements[]
}

model MajorRequirements {
  id      String          @id @db.Uuid
  majorId String          @db.Uuid
  type    RequirementType
  credits Int
  details Json
  level   Int
  Majors  Majors          @relation(fields: [majorId], references: [id], onUpdate: NoAction)
}

model MinorRequirements {
  id      String          @id @db.Uuid
  minorId String          @db.Uuid
  type    RequirementType
  credits Int
  details Json
  level   Int
  Minors  Minors          @relation(fields: [minorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model StudentCourses {
  id            String  @id @db.Uuid
  grade         String
  requirementId String  @db.Uuid
  studentId     String  @db.Uuid
  courseId      Int
  Course        Course  @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Student       Student @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum UserRole {
  STUDENT
  ADVISOR
  ADMIN
}

enum RequirementType {
  CREDITS
  POOL
}
