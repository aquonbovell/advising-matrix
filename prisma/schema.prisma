generator kysely {
  provider = "prisma-kysely"
  output   = "../src/lib/db"
  fileName = "schema.d.ts"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String           @id @unique @db.Uuid
  name            String
  email           String           @unique
  password        String
  role            UserRole
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  alternate_email String
  advisor         Advisor[]
  sessions        Session[]
  Student         Student[]
  StudentCourses  StudentCourses[]
}

model Session {
  id         String   @id @default(uuid())
  expires_at DateTime
  user_id    String   @db.Uuid
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Advisor {
  advisor_id String  @db.Uuid
  student_id String  @db.Uuid
  user       User    @relation(fields: [advisor_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Student    Student @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([advisor_id, student_id])
}

model Student {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  major_id       String           @db.Uuid
  minor_id       String           @db.Uuid
  invite_token   String?
  invite_expires DateTime?
  created_at     DateTime         @default(now())
  updated_at     DateTime
  Advisor        Advisor[]
  Majors         Majors           @relation(fields: [major_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user           User             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  StudentCourses StudentCourses[]
}

model Faculties {
  id          String        @id @unique
  name        String
  Departments Departments[]
}

model Departments {
  id        String    @id @unique
  facultyId String
  faculty   Faculties @relation(fields: [facultyId], references: [id])
  name      String
  Courses   Courses[]
}

model Courses {
  id                 String             @id @unique
  code               String             @unique
  name               String
  level              Int
  credits            Int
  departmentId       String
  department         Departments        @relation(fields: [departmentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  prerequisiteType   String             @default("all")
  prerequisiteAmount Int                @default(1)
  comment            String?
  prerequisitecourse Prerequisites[]    @relation("PrerequisiteCourse")
  courseprerequisite Prerequisites[]    @relation("CoursePrerequisite")
  StudentCourses     StudentCourses[]
  LevelRestriction   LevelRestriction[]
}

model LevelRestriction {
  id       String  @id @unique
  courseId String
  courses  Courses @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  area     String  @db.Text
  credits  Int
  level    String  @db.Text
}

model Prerequisites {
  id             String   @id @unique @default(uuid()) @db.Uuid
  courseId       String
  prerequisiteId String
  course         Courses? @relation("CoursePrerequisite", fields: [courseId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  prerequisite   Courses? @relation("PrerequisiteCourse", fields: [prerequisiteId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Majors {
  id                String              @id @unique @db.Uuid
  name              String              @unique(map: "Majors_name_idx")
  MajorRequirements MajorRequirements[]
  Student           Student[]
}

model Minors {
  id                String              @id @unique @db.Uuid
  name              String              @unique(map: "Minors_name_idx")
  MinorRequirements MinorRequirements[]
}

model MajorRequirements {
  id          String                 @id @db.Uuid
  majorId     String                 @db.Uuid
  option      requirementOption
  credits     Int
  details     String
  detailsType requirementDetailsType
  level       String
  Majors      Majors                 @relation(fields: [majorId], references: [id], onUpdate: NoAction)
}

model MinorRequirements {
  id          String                 @id @db.Uuid
  minorId     String                 @db.Uuid
  option      requirementOption
  credits     Int
  details     String
  detailsType requirementDetailsType
  level       String
  Minors      Minors                 @relation(fields: [minorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum requirementOption {
  REQUIRED
  OPTIONAL
}

enum requirementDetailsType {
  COURSES
  AREAS
  FACULTIES
}

model StudentCourses {
  id            String  @id @db.Uuid
  grade         String
  requirementId String  @db.Uuid
  studentId     String  @db.Uuid
  courseId      String
  userId        String? @db.Uuid
  courses       Courses @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Student       Student @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User          User?   @relation(fields: [userId], references: [id])
}

enum UserRole {
  STUDENT
  ADVISOR
  ADMIN
}

enum RequirementType {
  CREDITS
  POOL
}
